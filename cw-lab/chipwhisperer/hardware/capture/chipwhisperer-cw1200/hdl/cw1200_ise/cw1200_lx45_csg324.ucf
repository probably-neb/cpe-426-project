
CONFIG VCCAUX=3.3;

 NET target_npower  LOC=B4 | IOSTANDARD=LVCMOS33;

 NET LED_TRIGGERED  	LOC=E13 | IOSTANDARD=LVCMOS33;
 NET LED_GLITCHTRIGGERED  	LOC=C11 | IOSTANDARD=LVCMOS33;
 NET LED_ADCR      	LOC=B12 | IOSTANDARD=LVCMOS33;
 NET LED_ADCG      	LOC=D9  | IOSTANDARD=LVCMOS33;
 NET LED_GLITCHR    	LOC=F9  | IOSTANDARD=LVCMOS33;
 NET LED_GLITCHG    	LOC=C10 | IOSTANDARD=LVCMOS33;
 NET LED_CLKGENR    	LOC=G9  | IOSTANDARD=LVCMOS33;
 NET LED_CLKGENG    	LOC=D8  | IOSTANDARD=LVCMOS33;
 
 NET LED_AUXI     	LOC=D6  | IOSTANDARD=LVCMOS33;
 NET LED_AUXO    	   LOC=C7  | IOSTANDARD=LVCMOS33;
 
 NET sc_rst      LOC=B14 | IOSTANDARD=LVCMOS33;
 NET sc_clk      LOC=C13 | IOSTANDARD=LVCMOS33;
 NET sc_aux1     LOC=C14 | IOSTANDARD=LVCMOS33;
 NET sc_present  LOC=C15 | IOSTANDARD=LVCMOS33;
 NET sc_io       LOC=D14 | IOSTANDARD=LVCMOS33;
 NET sc_aux2     LOC=F13 | IOSTANDARD=LVCMOS33;
 
 NET SMAAUX  LOC=D11 | DRIVE=12 | IOSTANDARD=LVCMOS33 | SLEW=FAST;

 NET target_MISO    LOC=A2  | IOSTANDARD=LVCMOS33;
 NET target_MOSI    LOC=A3  | IOSTANDARD=LVCMOS33;
 NET target_SCK     LOC=A5  | IOSTANDARD=LVCMOS33;
 NET target_nRST    LOC=B2  | IOSTANDARD=LVCMOS33;
  
 NET target_io1     LOC=A4  | IOSTANDARD=LVCMOS33;
 NET target_io2     LOC=A6  | IOSTANDARD=LVCMOS33;
 NET target_io3     LOC=A11 | IOSTANDARD=LVCMOS33;
 NET target_io4     LOC=A12 | IOSTANDARD=LVCMOS33;
 
 NET target_hs2     LOC=A9  | IOSTANDARD=LVCMOS33 | SLEW=FAST;
 NET target_hs1     LOC=A10 | IOSTANDARD=LVCMOS33 | SLEW=FAST;
 
 NET target_PDIC    LOC=A8  | IOSTANDARD=LVCMOS33;
 NET target_PDIDTX  LOC=A14 | IOSTANDARD=LVCMOS33;
 NET target_PDIDRX  LOC=A15 | IOSTANDARD=LVCMOS33;
 
 NET glitchout_highpwr LOC=B16 |IOSTANDARD = LVCMOS33 | SLEW=FAST | DRIVE=24;
 NET glitchout_lowpwr LOC=A16  |IOSTANDARD = LVCMOS33 | SLEW=FAST | DRIVE=24;

 NET ADC_Data[0]  LOC=F17 | IOSTANDARD=LVCMOS33 | TNM = tg_ADC_Data;
 NET ADC_Data[1]  LOC=F18 | IOSTANDARD=LVCMOS33 | TNM = tg_ADC_Data;
 NET ADC_Data[2]  LOC=G18 | IOSTANDARD=LVCMOS33 | TNM = tg_ADC_Data;
 NET ADC_Data[3]  LOC=J18 | IOSTANDARD=LVCMOS33 | TNM = tg_ADC_Data;
 NET ADC_Data[4]  LOC=K18 | IOSTANDARD=LVCMOS33 | TNM = tg_ADC_Data;
 NET ADC_Data[5]  LOC=K17 | IOSTANDARD=LVCMOS33 | TNM = tg_ADC_Data;
 NET ADC_Data[6]  LOC=L18 | IOSTANDARD=LVCMOS33 | TNM = tg_ADC_Data;
 NET ADC_Data[7]  LOC=L17 | IOSTANDARD=LVCMOS33 | TNM = tg_ADC_Data;
 NET ADC_Data[8]  LOC=M18 | IOSTANDARD=LVCMOS33 | TNM = tg_ADC_Data;
 NET ADC_Data[9]  LOC=N18 | IOSTANDARD=LVCMOS33 | TNM = tg_ADC_Data;
 NET ADC_OR       LOC=N17 | IOSTANDARD=LVCMOS33 | TNM = tg_ADC_Data;

 NET amp_gain     LOC=C18 | IOSTANDARD=LVCMOS33 | SLEW=SLOW | DRIVE=2;
 NET amp_hilo     LOC=D18 | IOSTANDARD = LVCMOS33 | SLEW=SLOW | DRIVE=2;
 NET ADC_clk      LOC=E18 | DRIVE=8 | IOSTANDARD=LVCMOS33 | SLEW=FAST;
 NET ADC_clk_fb   LOC=H17 | IOSTANDARD=LVCMOS33;
 
#Put both input pin and net after IBUF into ADC_clk_fb timing net
NET ADC_clk_fb TNM_NET = ADC_clk_fb;
NET ADC_clk_fb TNM = ADC_clk_fb;
TIMESPEC TS_ADCClock_fb = PERIOD ADC_clk_fb 105000 kHz;

#Based on AD9215 datasheet values, where ADC_clk_fb is feedback about
#when rising edge hit the AD9215 clock pin
TIMEGRP "tg_ADC_Data" OFFSET = IN 2.5 ns VALID 5.0 ns BEFORE "ADC_clk_fb";

#K16?
# NET clk_100mhz  LOC=V10 | IOSTANDARD=LVCMOS33;
# NET clk_100mhz TNM_NET = clk_100mhz;
# TIMESPEC TS_clk_100mhz = PERIOD clk_100mhz 100000 kHz;

 #NET USB_CK1  LOC=V10 | IOSTANDARD=LVCMOS33;

#L12 #U10
 NET clk_usb  LOC=U10 | IOSTANDARD=LVCMOS33;
 NET clk_usb TNM_NET = clk_usb;
 TIMESPEC TS_clk_usb = PERIOD clk_usb 96000 kHz;

 NET USB_D[0]  LOC=T6 | IOSTANDARD=LVCMOS33 | SLEW=FAST  | TNM = tg_USB_Data;
 NET USB_D[1]  LOC=V5 | IOSTANDARD=LVCMOS33 | SLEW=FAST  | TNM = tg_USB_Data;
 NET USB_D[2]  LOC=T14 | IOSTANDARD=LVCMOS33 | SLEW=FAST  | TNM = tg_USB_Data;
 NET USB_D[3]  LOC=T11 | IOSTANDARD=LVCMOS33 | SLEW=FAST  | TNM = tg_USB_Data;
 NET USB_D[4]  LOC=U11 | IOSTANDARD=LVCMOS33 | SLEW=FAST  | TNM = tg_USB_Data;
 NET USB_D[5]  LOC=P6 | IOSTANDARD=LVCMOS33 | SLEW=FAST  | TNM = tg_USB_Data;
 NET USB_D[6]  LOC=V15 | IOSTANDARD=LVCMOS33 | SLEW=FAST  | TNM = tg_USB_Data;
 NET USB_D[7]  LOC=V14 | IOSTANDARD=LVCMOS33 | SLEW=FAST  | TNM = tg_USB_Data;
  
 NET USB_Addr[0]   LOC=U13 | IOSTANDARD=LVCMOS33  | TNM = tg_USB_Addr;
 NET USB_Addr[1]   LOC=V13 | IOSTANDARD=LVCMOS33  | TNM = tg_USB_Addr;
 NET USB_Addr[2]   LOC=P12 | IOSTANDARD=LVCMOS33  | TNM = tg_USB_Addr;
 NET USB_Addr[3]   LOC=T12 | IOSTANDARD=LVCMOS33  | TNM = tg_USB_Addr;
 NET USB_Addr[4]   LOC=V12 | IOSTANDARD=LVCMOS33  | TNM = tg_USB_Addr;
 NET USB_Addr[5]   LOC=R11 | IOSTANDARD=LVCMOS33  | TNM = tg_USB_Addr;
 NET USB_Addr[6]   LOC=V9 | IOSTANDARD=LVCMOS33  | TNM = tg_USB_Addr;
 NET USB_Addr[7]   LOC=V8 | IOSTANDARD=LVCMOS33  | TNM = tg_USB_Addr;
 #NET USB_Addr[8]   LOC=T7 | IOSTANDARD=LVCMOS33  | TNM = tg_USB_Data;
 #NET USB_Addr[9]   LOC=R7 | IOSTANDARD=LVCMOS33  | TNM = tg_USB_Data;
 #NET USB_Addr[10]  LOC=V11 | IOSTANDARD=LVCMOS33  | TNM = tg_USB_Data;
 #NET USB_Addr[11]  LOC=R10 | IOSTANDARD=LVCMOS33  | TNM = tg_USB_Data;
 #NET USB_Addr[12]  LOC=T10 | IOSTANDARD=LVCMOS33  | TNM = tg_USB_Data;
 #NET USB_Addr[13]  LOC=R8 | IOSTANDARD=LVCMOS33   | TNM = tg_USB_Data;
 #NET USB_Addr[14]  LOC=T8 | IOSTANDARD=LVCMOS33  | TNM = tg_USB_Data;
 #NET USB_Addr[15]  LOC=V6 | IOSTANDARD=LVCMOS33  | TNM = tg_USB_Data;
 #NET USB_Addr[16]  LOC=V7 | IOSTANDARD=LVCMOS33  | TNM = tg_USB_Data;
 #NET USB_Addr[17]  LOC=U7 | IOSTANDARD=LVCMOS33  | TNM = tg_USB_Data;
 #NET USB_Addr[18]  LOC=U8 | IOSTANDARD=LVCMOS33  | TNM = tg_USB_Data;
 
 NET USB_PDIC_EN  LOC=U7 | IOSTANDARD=LVCMOS33  | PULLDOWN;
 NET USB_PDID_WR  LOC=U8 | IOSTANDARD=LVCMOS33  | PULLDOWN;

 NET USB_ALEn  LOC=T4 | IOSTANDARD=LVCMOS33   | TNM = tg_USB_Ctrl;
 NET USB_WRn  LOC=R3 | IOSTANDARD=LVCMOS33  | TNM = tg_USB_Ctrl;
 NET USB_RDn  LOC=V4 | IOSTANDARD=LVCMOS33  | TNM = tg_USB_Ctrl;
 NET USB_CEn  LOC=N5 | IOSTANDARD=LVCMOS33  | TNM = tg_USB_Ctrl;
 

#TODO - this is a bit of a BS constraint. the SAM3U actually uses the _RD line
# going high, and internally in the SAM3U is sampling at some point before that.
#TIMEGRP "tg_USB_Data" OFFSET = OUT 7 nS AFTER clk_usb;
#TODO - Same note as above
#TIMEGRP "tg_USB_Data" OFFSET = IN 5.2 ns VALID 10.4 ns BEFORE "clk_usb";

 NET USB_spare0  LOC=U5 | IOSTANDARD=LVCMOS33;
 NET USB_spare1  LOC=R5 | IOSTANDARD=LVCMOS33;
 NET USB_spare2  LOC=T3 | IOSTANDARD=LVCMOS33;


 NET USB_TXD0  LOC=R13 | IOSTANDARD=LVCMOS33;
 NET USB_SCK0  LOC=R15 | IOSTANDARD=LVCMOS33;
 NET USB_RXD0  LOC=U15 | IOSTANDARD=LVCMOS33;
 NET USB_CTS0  LOC=N11 | IOSTANDARD=LVCMOS33;
 NET USB_RTS0  LOC=P11 | IOSTANDARD=LVCMOS33;

 NET USB_TXD1  LOC=T17 | IOSTANDARD=LVCMOS33;
 NET USB_RXD1  LOC=P17 | IOSTANDARD=LVCMOS33;
 NET USB_SCK1  LOC=T18 | IOSTANDARD=LVCMOS33;
 
 NET USB_TXD2  LOC=N15 | IOSTANDARD=LVCMOS33;
 NET USB_RXD2  LOC=U18 | IOSTANDARD=LVCMOS33; 
 NET USB_SCK2  LOC=P18 | IOSTANDARD=LVCMOS33;

 NET USB_TXD3  LOC=N16 | IOSTANDARD=LVCMOS33;
 NET USB_RXD3  LOC=U17 | IOSTANDARD=LVCMOS33;
 #NET USB_SCK3  LOC=K12 | IOSTANDARD=LVCMOS33;
 
 #PIN "reg_clockglitch/gc/dcm1_clk_out_BUFG.O" CLOCK_DEDICATED_ROUTE = FALSE;
 #PIN "reg_chipwhisperer/clkgenfx_mux.O" CLOCK_DEDICATED_ROUTE = FALSE; 
 #PIN "reg_chipwhisperer/clkgenfx_mux.O" CLOCK_DEDICATED_ROUTE = FALSE; 


#This route ends up having S&H problems. However we don't care as it gets toggled very infrequently
#Target is -> target_hs2_OBUF:OCE
NET "reg_chipwhisperer/registers_cwextclk<7>" TIG;

#This route also has S&H problems, again we don't care as if the wrong data is in for a clock cyle
#it doesn't matter, and will get cleared up afterwards (I think, should check all this)

NET "reg_chipwhisperer/registers_*" TIG;
NET "oadc/timer_heartbeat*" TIG;

#INST "oadc/genclocks/DCM_extclock_gen" LOC="DCM_X0Y1";
#INST "oadc/genclocks/DCM_CLKGEN_inst" LOC="DCM_X0Y3";
#INST "oadc/genclocks/DCM_CLKGEN_inst" LOC="DCM_X0Y1";
#INST "clk_usb_buf_BUFG" LOC="BUFGMUX_X3Y15";

#List of available DCM resources
#Bottom Half
#"DCM_X0Y1"
#"DCM_X0Y2"
#"DCM_X0Y3"
#Top Half
#"DCM_X0Y4"
#"DCM_X0Y5"
#"DCM_X0Y6"
#"DCM_X0Y7"

#Potentially can force them as needed - for now not done
#INST "oadc/genclocks/DCM_CLKGEN_inst" LOC="DCM_X0Y1";
#INST "oadc/genclocks/DCM_extclock_gen" LOC="DCM_X0Y5";
#INST "reg_chipwhisperer/clkgenfx_mux" LOC="BUFGMUX_X2Y3";

#Ensure these both end up in one block which allows partial reconfiguration
#data to work. These two locations have been tested to work, and are also in
#top half of device (further away from USB-interface side which is in bottom half)

##(1/2) If disabling glitch generation block (sometimes required during debug), comment out following
##2 lines:
INST "reg_clockglitch/gc/DCM_extclock_gen" LOC="DCM_X0Y6";
INST "reg_clockglitch/gc/DCM_extclock_gen2" LOC="DCM_X0Y7";

#Place these two into a site which allows this pair to work together
INST "clkout0_buf" LOC="BUFGMUX_X2Y3";
INST "oadc/genclocks/clkgenfx_mux" LOC="BUFGMUX_X2Y4";
INST "reg_chipwhisperer/clkgenfx_mux" LOC="BUFGMUX_X2Y1";




#BUFIO2_X3Y6


#INST "clkusb_ibufg" LOC="BUFGMUX_X2Y1";

PIN "reg_chipwhisperer/clkgenfx_mux.O" CLOCK_DEDICATED_ROUTE = FALSE;
//PIN "reg_chipwhisperer/clkauxline_mux.O" CLOCK_DEDICATED_ROUTE = FALSE;

#Note: ISE generates a too-strict derived constraints... ADC signals only good up to 100 MHz due
#to ADC requirements. But if the input is 100 MHz, this signal would be at 400 MHz. The
#user knows they can't use the 4x clock then so we don't need such a high constraint...
NET "oadc/genclocks/dcm_clk_in" TNM_NET = "TN_DCMInput";
NET "oadc/genclocks/clkgenfx_in" TNM_NET = "TN_DCMInput";
TIMESPEC "TS_DCMInput" = PERIOD "TN_DCMInput" 10 ns HIGH 50% PRIORITY -1;

NET "oadc/genclocks/out_from_dcmmux" TNM_NET = "TN_ADCSampleClock";
#NET "oadc/ADC_clk_sample" TNM_NET = "TN_ADCSampleClock";
NET "oadc/genclocks/ADC_clk_times4"  TNM_NET = "TN_ADCSampleClock";
#NET "oadc/genclocks/clkgenfx_out" TNM_NET = "TN_ADCSampleClock";
TIMESPEC "TS_ADCSampleClock" = PERIOD "TN_ADCSampleClock" 9.5 ns HIGH 50% PRIORITY 0;


##(2/2) If disabling glitch generation block (sometimes required during debug), comment out following
##4 lines:
PIN "reg_clockglitch/gc/dcm1_clk_out_BUFG.O" CLOCK_DEDICATED_ROUTE = FALSE;
NET "reg_clockglitch/clockglitch_settings_reg*" TIG;
NET "reg_clockglitch/clockglitch_offset_reg*" TIG;
NET "reg_clockglitch/manual" TIG;
