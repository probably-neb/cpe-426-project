// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2012.4
// Copyright (C) 2012 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="smartcard,hls_ip_2012_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k70tfbg484-1,HLS_INPUT_CLOCK=16.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.918000,HLS_SYN_LAT=23,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=326,HLS_SYN_LUT=538}" *)

module smartcard (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        cla,
        ins,
        p1,
        p2,
        len_command,
        command,
        len_response,
        response,
        status,
        uart_out_din,
        uart_out_full_n,
        uart_out_write,
        uart_in_dout,
        uart_in_empty_n,
        uart_in_read,
        ap_return
);

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] cla;
input  [7:0] ins;
input  [7:0] p1;
input  [7:0] p2;
input  [4:0] len_command;
input  [127:0] command;
input  [4:0] len_response;
output  [127:0] response;
output  [0:0] status;
output  [7:0] uart_out_din;
input   uart_out_full_n;
output   uart_out_write;
input  [7:0] uart_in_dout;
input   uart_in_empty_n;
output   uart_in_read;
output  [15:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[127:0] response;
reg[0:0] status;
reg[7:0] uart_out_din;
reg uart_out_write;
reg uart_in_read;
reg   [3:0] ap_CS_fsm = 4'b0000;
wire   [4:0] len_command_assign_fu_249_p3;
reg   [4:0] len_command_assign_reg_476;
wire   [4:0] len_response_assign_fu_263_p3;
reg   [4:0] len_response_assign_reg_481;
wire   [0:0] tmp_3_fu_277_p2;
reg   [0:0] tmp_3_reg_486;
wire   [4:0] tmp7_fu_310_p3;
reg   [4:0] tmp7_reg_491;
wire   [4:0] p_rec_fu_363_p2;
wire   [0:0] exitcond_fu_358_p2;
wire   [0:0] tmp_6_fu_388_p2;
reg    ap_sig_bdd_82;
reg   [0:0] tmp_6_reg_504;
wire   [4:0] grp_fu_230_p3;
reg   [4:0] tmp13_reg_508;
wire   [0:0] grp_fu_237_p2;
reg   [0:0] exitcond2_reg_513;
wire   [127:0] tmp_14_fu_397_p1;
reg   [4:0] tmp11_reg_522;
reg   [0:0] exitcond1_reg_527;
wire   [4:0] uart_i_0_rec_fu_406_p2;
reg   [4:0] uart_i_0_rec_reg_531;
wire   [0:0] exitcond3_fu_412_p2;
reg    ap_sig_bdd_119;
reg   [7:0] uart_in_read_2_reg_539;
wire   [127:0] tmp_18_fu_433_p5;
reg   [4:0] uart_ou_0_rec_reg_168;
reg   [4:0] tmp4_reg2mem_0_ph_reg_179;
reg    ap_sig_bdd_142;
reg   [127:0] tmp_14_reg2mem_0_ph_phi_fu_192_p4;
reg   [127:0] tmp_14_reg2mem_0_ph_reg_189;
wire   [127:0] tmp_13_fu_401_p1;
reg   [127:0] tmp_14_reg2mem_reg_199;
reg   [4:0] uart_i_0_rec_reload_reg2mem_reg_211;
reg    ap_sig_bdd_158;
wire   [7:0] p3_fu_297_p1;
wire   [7:0] tmp_7_fu_378_p1;
wire   [7:0] tmp_8_fu_393_p1;
wire   [0:0] tmp_5_fu_318_p2;
reg   [0:0] status_preg = 1'b0;
reg   [127:0] response_preg = 128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
wire   [127:0] tmp_15_fu_418_p2;
wire   [0:0] grp_fu_223_p3;
wire   [0:0] tmp_fu_243_p2;
wire   [0:0] tmp_1_fu_257_p2;
wire   [0:0] tmp_2_fu_271_p2;
wire   [0:0] tmp_4_fu_283_p2;
wire   [4:0] len_response_assign_1_fu_289_p3;
wire   [0:0] tmp_9_fu_302_p3;
wire   [7:0] uart_ou_0_rec_cast_fu_324_p1;
wire   [7:0] p_shl_fu_328_p2;
wire   [7:0] tmp2_fu_338_p2;
wire   [8:0] p_shl_cast_fu_334_p1;
wire   [8:0] loopcnt_fu_348_p2;
wire   [31:0] p_Result_s_fu_369_p2;
wire   [31:0] p_Result_s_fu_369_p3;
wire   [127:0] p_Result_s_fu_369_p4;
wire   [0:0] tmp_s_fu_383_p2;
wire   [127:0] tmp_16_fu_425_p1;
wire   [119:0] tmp_17_fu_429_p1;
wire   [15:0] tmp_11_fu_445_p1;
reg   [3:0] ap_NS_fsm;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 4'b0000;
parameter    ap_ST_st2_fsm_1 = 4'b0001;
parameter    ap_ST_st3_fsm_2 = 4'b0010;
parameter    ap_ST_st4_fsm_3 = 4'b0011;
parameter    ap_ST_st5_fsm_4 = 4'b0100;
parameter    ap_ST_st6_fsm_5 = 4'b0101;
parameter    ap_ST_st7_fsm_6 = 4'b0110;
parameter    ap_ST_st8_fsm_7 = 4'b0111;
parameter    ap_ST_st9_fsm_8 = 4'b1000;
parameter    ap_ST_st10_fsm_9 = 4'b1001;
parameter    ap_ST_st11_fsm_10 = 4'b1010;
parameter    ap_ST_st12_fsm_11 = 4'b1011;
parameter    ap_ST_st13_fsm_12 = 4'b1100;
parameter    ap_ST_st14_fsm_13 = 4'b1101;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv5_1 = 5'b00001;
parameter    ap_const_lv128_lc_1 = 128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_4 = 32'b00000000000000000000000000000100;
parameter    ap_const_lv5_10 = 5'b10000;
parameter    ap_const_lv8_3 = 8'b00000011;
parameter    ap_const_lv8_7F = 8'b01111111;
parameter    ap_const_lv9_78 = 9'b001111000;
parameter    ap_const_lv128_lc_2 = 128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000;
parameter    ap_const_lv32_8 = 32'b00000000000000000000000000001000;
parameter    ap_const_lv32_7F = 32'b00000000000000000000000001111111;
parameter    ap_const_lv32_F = 32'b00000000000000000000000000001111;
parameter    ap_true = 1'b1;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// response_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_response_preg
    if (ap_rst == 1'b1) begin
        response_preg <= ap_const_lv128_lc_1;
    end else begin
        if ((~(uart_in_empty_n == ap_const_logic_0) & (ap_ST_st13_fsm_12 == ap_CS_fsm))) begin
            response_preg <= tmp_15_fu_418_p2;
        end else if (((ap_ST_st12_fsm_11 == ap_CS_fsm) & ~ap_sig_bdd_119 & (((ap_const_lv1_0 == tmp_6_reg_504) & (ap_const_lv1_0 == exitcond2_reg_513)) | (~(ap_const_lv1_0 == tmp_6_reg_504) & (ap_const_lv1_0 == exitcond1_reg_527))))) begin
            response_preg <= tmp_14_reg2mem_reg_199;
        end else if ((((ap_ST_st8_fsm_7 == ap_CS_fsm) & ~(exitcond_fu_358_p2 == ap_const_lv1_0) & (ap_const_lv1_0 == tmp_6_fu_388_p2) & ~ap_sig_bdd_82) | ((ap_ST_st9_fsm_8 == ap_CS_fsm) & ~(uart_in_empty_n == ap_const_logic_0)) | (ap_ST_st10_fsm_9 == ap_CS_fsm) | (~(ap_const_lv1_0 == tmp_6_reg_504) & (ap_ST_st11_fsm_10 == ap_CS_fsm) & ~ap_sig_bdd_142))) begin
            response_preg <= ap_const_lv128_lc_1;
        end
    end
end

/// status_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_status_preg
    if (ap_rst == 1'b1) begin
        status_preg <= ap_const_lv1_0;
    end else begin
        if ((~(uart_in_empty_n == ap_const_logic_0) & (ap_ST_st6_fsm_5 == ap_CS_fsm))) begin
            status_preg <= tmp_5_fu_318_p2;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st10_fsm_9 == ap_CS_fsm)) begin
        exitcond1_reg_527 <= grp_fu_237_p2;
    end
    if (((ap_ST_st8_fsm_7 == ap_CS_fsm) & ~(exitcond_fu_358_p2 == ap_const_lv1_0) & (ap_const_lv1_0 == tmp_6_fu_388_p2) & ~ap_sig_bdd_82)) begin
        exitcond2_reg_513 <= grp_fu_237_p2;
    end
    if ((~(uart_out_full_n == ap_const_logic_0) & (ap_ST_st5_fsm_4 == ap_CS_fsm))) begin
        len_command_assign_reg_476 <= len_command_assign_fu_249_p3;
    end
    if ((~(uart_out_full_n == ap_const_logic_0) & (ap_ST_st5_fsm_4 == ap_CS_fsm))) begin
        len_response_assign_reg_481 <= len_response_assign_fu_263_p3;
    end
    if ((ap_ST_st10_fsm_9 == ap_CS_fsm)) begin
        tmp11_reg_522 <= grp_fu_230_p3;
    end
    if (((ap_ST_st8_fsm_7 == ap_CS_fsm) & ~(exitcond_fu_358_p2 == ap_const_lv1_0) & (ap_const_lv1_0 == tmp_6_fu_388_p2) & ~ap_sig_bdd_82)) begin
        tmp13_reg_508 <= grp_fu_230_p3;
    end
    if ((~(ap_const_lv1_0 == tmp_6_reg_504) & (ap_ST_st11_fsm_10 == ap_CS_fsm) & ~ap_sig_bdd_142)) begin
        tmp4_reg2mem_0_ph_reg_179 <= tmp11_reg_522;
    end else if (((ap_ST_st9_fsm_8 == ap_CS_fsm) & ~(uart_in_empty_n == ap_const_logic_0))) begin
        tmp4_reg2mem_0_ph_reg_179 <= tmp13_reg_508;
    end
    if ((~(uart_out_full_n == ap_const_logic_0) & (ap_ST_st5_fsm_4 == ap_CS_fsm))) begin
        tmp7_reg_491 <= tmp7_fu_310_p3;
    end
    if ((~(ap_const_lv1_0 == tmp_6_reg_504) & (ap_ST_st11_fsm_10 == ap_CS_fsm) & ~ap_sig_bdd_142)) begin
        tmp_14_reg2mem_0_ph_reg_189[0] <= tmp_13_fu_401_p1[0];
        tmp_14_reg2mem_0_ph_reg_189[1] <= tmp_13_fu_401_p1[1];
        tmp_14_reg2mem_0_ph_reg_189[2] <= tmp_13_fu_401_p1[2];
        tmp_14_reg2mem_0_ph_reg_189[3] <= tmp_13_fu_401_p1[3];
        tmp_14_reg2mem_0_ph_reg_189[4] <= tmp_13_fu_401_p1[4];
        tmp_14_reg2mem_0_ph_reg_189[5] <= tmp_13_fu_401_p1[5];
        tmp_14_reg2mem_0_ph_reg_189[6] <= tmp_13_fu_401_p1[6];
        tmp_14_reg2mem_0_ph_reg_189[7] <= tmp_13_fu_401_p1[7];
    end else if (((ap_ST_st9_fsm_8 == ap_CS_fsm) & ~(uart_in_empty_n == ap_const_logic_0))) begin
        tmp_14_reg2mem_0_ph_reg_189[0] <= tmp_14_fu_397_p1[0];
        tmp_14_reg2mem_0_ph_reg_189[1] <= tmp_14_fu_397_p1[1];
        tmp_14_reg2mem_0_ph_reg_189[2] <= tmp_14_fu_397_p1[2];
        tmp_14_reg2mem_0_ph_reg_189[3] <= tmp_14_fu_397_p1[3];
        tmp_14_reg2mem_0_ph_reg_189[4] <= tmp_14_fu_397_p1[4];
        tmp_14_reg2mem_0_ph_reg_189[5] <= tmp_14_fu_397_p1[5];
        tmp_14_reg2mem_0_ph_reg_189[6] <= tmp_14_fu_397_p1[6];
        tmp_14_reg2mem_0_ph_reg_189[7] <= tmp_14_fu_397_p1[7];
    end
    if (((ap_ST_st11_fsm_10 == ap_CS_fsm) & ~ap_sig_bdd_142)) begin
        tmp_14_reg2mem_reg_199 <= tmp_14_reg2mem_0_ph_phi_fu_192_p4;
    end else if ((~(uart_in_empty_n == ap_const_logic_0) & (ap_ST_st13_fsm_12 == ap_CS_fsm))) begin
        tmp_14_reg2mem_reg_199 <= tmp_18_fu_433_p5;
    end
    if ((~(uart_out_full_n == ap_const_logic_0) & (ap_ST_st5_fsm_4 == ap_CS_fsm))) begin
        tmp_3_reg_486 <= tmp_3_fu_277_p2;
    end
    if (((ap_ST_st8_fsm_7 == ap_CS_fsm) & ~(exitcond_fu_358_p2 == ap_const_lv1_0) & ~ap_sig_bdd_82)) begin
        tmp_6_reg_504 <= tmp_6_fu_388_p2;
    end
    if (((ap_ST_st12_fsm_11 == ap_CS_fsm) & ~ap_sig_bdd_119 & (((ap_const_lv1_0 == tmp_6_reg_504) & (ap_const_lv1_0 == exitcond2_reg_513)) | (~(ap_const_lv1_0 == tmp_6_reg_504) & (ap_const_lv1_0 == exitcond1_reg_527))))) begin
        uart_i_0_rec_reg_531 <= uart_i_0_rec_fu_406_p2;
    end
    if (((ap_ST_st11_fsm_10 == ap_CS_fsm) & ~ap_sig_bdd_142)) begin
        uart_i_0_rec_reload_reg2mem_reg_211 <= ap_const_lv5_1;
    end else if ((~(uart_in_empty_n == ap_const_logic_0) & (ap_ST_st13_fsm_12 == ap_CS_fsm))) begin
        uart_i_0_rec_reload_reg2mem_reg_211 <= uart_i_0_rec_reg_531;
    end
    if (((ap_ST_st12_fsm_11 == ap_CS_fsm) & (((ap_const_lv1_0 == tmp_6_reg_504) & ~(ap_const_lv1_0 == exitcond2_reg_513)) | (~(ap_const_lv1_0 == tmp_6_reg_504) & ~(ap_const_lv1_0 == exitcond1_reg_527)) | ~(ap_const_lv1_0 == exitcond3_fu_412_p2)) & ~ap_sig_bdd_119)) begin
        uart_in_read_2_reg_539 <= uart_in_dout;
    end
    if (((ap_ST_st8_fsm_7 == ap_CS_fsm) & (exitcond_fu_358_p2 == ap_const_lv1_0) & ~ap_sig_bdd_82)) begin
        uart_ou_0_rec_reg_168 <= p_rec_fu_363_p2;
    end else if ((ap_ST_st7_fsm_6 == ap_CS_fsm)) begin
        uart_ou_0_rec_reg_168 <= ap_const_lv5_0;
    end
end

/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_CS_fsm or uart_out_full_n or uart_in_empty_n or exitcond_fu_358_p2 or tmp_6_fu_388_p2 or ap_sig_bdd_82 or tmp_6_reg_504 or grp_fu_237_p2 or exitcond2_reg_513 or exitcond1_reg_527 or exitcond3_fu_412_p2 or ap_sig_bdd_119 or ap_sig_bdd_142 or ap_sig_bdd_158)
begin
    if ((~(uart_in_empty_n == ap_const_logic_0) & (ap_ST_st14_fsm_13 == ap_CS_fsm))) begin
        ap_NS_fsm = ap_ST_st1_fsm_0;
    end else if (((ap_ST_st12_fsm_11 == ap_CS_fsm) & (((ap_const_lv1_0 == tmp_6_reg_504) & ~(ap_const_lv1_0 == exitcond2_reg_513)) | (~(ap_const_lv1_0 == tmp_6_reg_504) & ~(ap_const_lv1_0 == exitcond1_reg_527)) | ~(ap_const_lv1_0 == exitcond3_fu_412_p2)) & ~ap_sig_bdd_119)) begin
        ap_NS_fsm = ap_ST_st14_fsm_13;
    end else if (((ap_ST_st12_fsm_11 == ap_CS_fsm) & ~ap_sig_bdd_119 & (((ap_const_lv1_0 == tmp_6_reg_504) & (ap_const_lv1_0 == exitcond2_reg_513) & (ap_const_lv1_0 == exitcond3_fu_412_p2)) | (~(ap_const_lv1_0 == tmp_6_reg_504) & (ap_const_lv1_0 == exitcond1_reg_527) & (ap_const_lv1_0 == exitcond3_fu_412_p2))))) begin
        ap_NS_fsm = ap_ST_st13_fsm_12;
    end else if ((((ap_ST_st9_fsm_8 == ap_CS_fsm) & ~(uart_in_empty_n == ap_const_logic_0)) | ((ap_ST_st10_fsm_9 == ap_CS_fsm) & (ap_const_lv1_0 == grp_fu_237_p2)))) begin
        ap_NS_fsm = ap_ST_st11_fsm_10;
    end else if (((~(uart_in_empty_n == ap_const_logic_0) & (ap_ST_st13_fsm_12 == ap_CS_fsm)) | ((ap_ST_st11_fsm_10 == ap_CS_fsm) & ~ap_sig_bdd_142) | ((ap_ST_st8_fsm_7 == ap_CS_fsm) & ~(exitcond_fu_358_p2 == ap_const_lv1_0) & (ap_const_lv1_0 == tmp_6_fu_388_p2) & ~ap_sig_bdd_82 & ~(ap_const_lv1_0 == grp_fu_237_p2)) | ((ap_ST_st10_fsm_9 == ap_CS_fsm) & ~(ap_const_lv1_0 == grp_fu_237_p2)))) begin
        ap_NS_fsm = ap_ST_st12_fsm_11;
    end else if (((ap_ST_st8_fsm_7 == ap_CS_fsm) & ~(exitcond_fu_358_p2 == ap_const_lv1_0) & (ap_const_lv1_0 == tmp_6_fu_388_p2) & ~ap_sig_bdd_82 & (ap_const_lv1_0 == grp_fu_237_p2))) begin
        ap_NS_fsm = ap_ST_st9_fsm_8;
    end else if (((ap_ST_st8_fsm_7 == ap_CS_fsm) & ~(exitcond_fu_358_p2 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_6_fu_388_p2) & ~ap_sig_bdd_82)) begin
        ap_NS_fsm = ap_ST_st10_fsm_9;
    end else if (((ap_ST_st7_fsm_6 == ap_CS_fsm) | ((ap_ST_st8_fsm_7 == ap_CS_fsm) & (exitcond_fu_358_p2 == ap_const_lv1_0) & ~ap_sig_bdd_82))) begin
        ap_NS_fsm = ap_ST_st8_fsm_7;
    end else if ((~(uart_in_empty_n == ap_const_logic_0) & (ap_ST_st6_fsm_5 == ap_CS_fsm))) begin
        ap_NS_fsm = ap_ST_st7_fsm_6;
    end else if ((~(uart_out_full_n == ap_const_logic_0) & (ap_ST_st5_fsm_4 == ap_CS_fsm))) begin
        ap_NS_fsm = ap_ST_st6_fsm_5;
    end else if ((~(uart_out_full_n == ap_const_logic_0) & (ap_ST_st4_fsm_3 == ap_CS_fsm))) begin
        ap_NS_fsm = ap_ST_st5_fsm_4;
    end else if ((~(uart_out_full_n == ap_const_logic_0) & (ap_ST_st3_fsm_2 == ap_CS_fsm))) begin
        ap_NS_fsm = ap_ST_st4_fsm_3;
    end else if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(uart_out_full_n == ap_const_logic_0))) begin
        ap_NS_fsm = ap_ST_st3_fsm_2;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~ap_sig_bdd_158)) begin
        ap_NS_fsm = ap_ST_st2_fsm_1;
    end else begin
        ap_NS_fsm = ap_CS_fsm;
    end
end

/// ap_done assign process. ///
always @ (ap_CS_fsm or uart_in_empty_n)
begin
    if ((~(uart_in_empty_n == ap_const_logic_0) & (ap_ST_st14_fsm_13 == ap_CS_fsm))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm or uart_in_empty_n)
begin
    if ((~(uart_in_empty_n == ap_const_logic_0) & (ap_ST_st14_fsm_13 == ap_CS_fsm))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// response assign process. ///
always @ (ap_CS_fsm or uart_in_empty_n or exitcond_fu_358_p2 or tmp_6_fu_388_p2 or ap_sig_bdd_82 or tmp_6_reg_504 or exitcond2_reg_513 or exitcond1_reg_527 or ap_sig_bdd_119 or ap_sig_bdd_142 or tmp_14_reg2mem_reg_199 or response_preg or tmp_15_fu_418_p2)
begin
    if ((~(uart_in_empty_n == ap_const_logic_0) & (ap_ST_st13_fsm_12 == ap_CS_fsm))) begin
        response = tmp_15_fu_418_p2;
    end else if (((ap_ST_st12_fsm_11 == ap_CS_fsm) & ~ap_sig_bdd_119 & (((ap_const_lv1_0 == tmp_6_reg_504) & (ap_const_lv1_0 == exitcond2_reg_513)) | (~(ap_const_lv1_0 == tmp_6_reg_504) & (ap_const_lv1_0 == exitcond1_reg_527))))) begin
        response = tmp_14_reg2mem_reg_199;
    end else if ((((ap_ST_st8_fsm_7 == ap_CS_fsm) & ~(exitcond_fu_358_p2 == ap_const_lv1_0) & (ap_const_lv1_0 == tmp_6_fu_388_p2) & ~ap_sig_bdd_82) | ((ap_ST_st9_fsm_8 == ap_CS_fsm) & ~(uart_in_empty_n == ap_const_logic_0)) | (ap_ST_st10_fsm_9 == ap_CS_fsm) | (~(ap_const_lv1_0 == tmp_6_reg_504) & (ap_ST_st11_fsm_10 == ap_CS_fsm) & ~ap_sig_bdd_142))) begin
        response = ap_const_lv128_lc_1;
    end else begin
        response = response_preg;
    end
end

/// status assign process. ///
always @ (ap_CS_fsm or uart_in_empty_n or tmp_5_fu_318_p2 or status_preg)
begin
    if ((~(uart_in_empty_n == ap_const_logic_0) & (ap_ST_st6_fsm_5 == ap_CS_fsm))) begin
        status = tmp_5_fu_318_p2;
    end else begin
        status = status_preg;
    end
end

/// tmp_14_reg2mem_0_ph_phi_fu_192_p4 assign process. ///
always @ (ap_CS_fsm or tmp_6_reg_504 or tmp_14_reg2mem_0_ph_reg_189 or tmp_13_fu_401_p1)
begin
    if ((~(ap_const_lv1_0 == tmp_6_reg_504) & (ap_ST_st11_fsm_10 == ap_CS_fsm))) begin
        tmp_14_reg2mem_0_ph_phi_fu_192_p4 = tmp_13_fu_401_p1;
    end else begin
        tmp_14_reg2mem_0_ph_phi_fu_192_p4 = tmp_14_reg2mem_0_ph_reg_189;
    end
end

/// uart_in_read assign process. ///
always @ (ap_CS_fsm or uart_in_empty_n or tmp_6_reg_504 or exitcond2_reg_513 or exitcond1_reg_527 or exitcond3_fu_412_p2 or ap_sig_bdd_119 or ap_sig_bdd_142)
begin
    if ((((ap_ST_st9_fsm_8 == ap_CS_fsm) & ~(uart_in_empty_n == ap_const_logic_0)) | ((ap_ST_st12_fsm_11 == ap_CS_fsm) & (((ap_const_lv1_0 == tmp_6_reg_504) & ~(ap_const_lv1_0 == exitcond2_reg_513)) | (~(ap_const_lv1_0 == tmp_6_reg_504) & ~(ap_const_lv1_0 == exitcond1_reg_527)) | ~(ap_const_lv1_0 == exitcond3_fu_412_p2)) & ~ap_sig_bdd_119) | (~(uart_in_empty_n == ap_const_logic_0) & (ap_ST_st13_fsm_12 == ap_CS_fsm)) | (~(ap_const_lv1_0 == tmp_6_reg_504) & (ap_ST_st11_fsm_10 == ap_CS_fsm) & ~ap_sig_bdd_142) | (~(uart_in_empty_n == ap_const_logic_0) & (ap_ST_st6_fsm_5 == ap_CS_fsm)) | (~(uart_in_empty_n == ap_const_logic_0) & (ap_ST_st14_fsm_13 == ap_CS_fsm)))) begin
        uart_in_read = ap_const_logic_1;
    end else begin
        uart_in_read = ap_const_logic_0;
    end
end

/// uart_out_din assign process. ///
always @ (ap_CS_fsm or cla or ins or p1 or p2 or uart_out_full_n or exitcond_fu_358_p2 or tmp_6_fu_388_p2 or ap_sig_bdd_82 or ap_sig_bdd_158 or p3_fu_297_p1 or tmp_7_fu_378_p1 or tmp_8_fu_393_p1)
begin
    if (((ap_ST_st8_fsm_7 == ap_CS_fsm) & ~(exitcond_fu_358_p2 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_6_fu_388_p2) & ~ap_sig_bdd_82)) begin
        uart_out_din = tmp_8_fu_393_p1;
    end else if (((ap_ST_st8_fsm_7 == ap_CS_fsm) & (exitcond_fu_358_p2 == ap_const_lv1_0) & ~ap_sig_bdd_82)) begin
        uart_out_din = tmp_7_fu_378_p1;
    end else if ((~(uart_out_full_n == ap_const_logic_0) & (ap_ST_st5_fsm_4 == ap_CS_fsm))) begin
        uart_out_din = p3_fu_297_p1;
    end else if ((~(uart_out_full_n == ap_const_logic_0) & (ap_ST_st4_fsm_3 == ap_CS_fsm))) begin
        uart_out_din = p2;
    end else if ((~(uart_out_full_n == ap_const_logic_0) & (ap_ST_st3_fsm_2 == ap_CS_fsm))) begin
        uart_out_din = p1;
    end else if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(uart_out_full_n == ap_const_logic_0))) begin
        uart_out_din = ins;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~ap_sig_bdd_158)) begin
        uart_out_din = cla;
    end else begin
        uart_out_din = tmp_8_fu_393_p1;
    end
end

/// uart_out_write assign process. ///
always @ (ap_CS_fsm or uart_out_full_n or exitcond_fu_358_p2 or tmp_6_fu_388_p2 or ap_sig_bdd_82 or ap_sig_bdd_158)
begin
    if ((((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(uart_out_full_n == ap_const_logic_0)) | (~(uart_out_full_n == ap_const_logic_0) & (ap_ST_st5_fsm_4 == ap_CS_fsm)) | ((ap_ST_st8_fsm_7 == ap_CS_fsm) & (exitcond_fu_358_p2 == ap_const_lv1_0) & ~ap_sig_bdd_82) | ((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~ap_sig_bdd_158) | (~(uart_out_full_n == ap_const_logic_0) & (ap_ST_st3_fsm_2 == ap_CS_fsm)) | (~(uart_out_full_n == ap_const_logic_0) & (ap_ST_st4_fsm_3 == ap_CS_fsm)) | ((ap_ST_st8_fsm_7 == ap_CS_fsm) & ~(exitcond_fu_358_p2 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_6_fu_388_p2) & ~ap_sig_bdd_82))) begin
        uart_out_write = ap_const_logic_1;
    end else begin
        uart_out_write = ap_const_logic_0;
    end
end
assign ap_return = {{uart_in_read_2_reg_539}, {tmp_11_fu_445_p1[32'd7 : 32'd0]}};

/// ap_sig_bdd_119 assign process. ///
always @ (uart_in_empty_n or tmp_6_reg_504 or exitcond2_reg_513 or exitcond1_reg_527 or exitcond3_fu_412_p2)
begin
    ap_sig_bdd_119 = ((uart_in_empty_n == ap_const_logic_0) & (((ap_const_lv1_0 == tmp_6_reg_504) & ~(ap_const_lv1_0 == exitcond2_reg_513)) | (~(ap_const_lv1_0 == tmp_6_reg_504) & ~(ap_const_lv1_0 == exitcond1_reg_527)) | ~(ap_const_lv1_0 == exitcond3_fu_412_p2)));
end

/// ap_sig_bdd_142 assign process. ///
always @ (uart_in_empty_n or tmp_6_reg_504)
begin
    ap_sig_bdd_142 = ((uart_in_empty_n == ap_const_logic_0) & ~(ap_const_lv1_0 == tmp_6_reg_504));
end

/// ap_sig_bdd_158 assign process. ///
always @ (ap_start or uart_out_full_n)
begin
    ap_sig_bdd_158 = ((uart_out_full_n == ap_const_logic_0) | (ap_start == ap_const_logic_0));
end

/// ap_sig_bdd_82 assign process. ///
always @ (uart_out_full_n or exitcond_fu_358_p2 or tmp_6_fu_388_p2)
begin
    ap_sig_bdd_82 = (((uart_out_full_n == ap_const_logic_0) & (exitcond_fu_358_p2 == ap_const_lv1_0)) | ((uart_out_full_n == ap_const_logic_0) & ~(exitcond_fu_358_p2 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_6_fu_388_p2)));
end
assign exitcond3_fu_412_p2 = (uart_i_0_rec_reload_reg2mem_reg_211 == tmp4_reg2mem_0_ph_reg_179? 1'b1: 1'b0);
assign exitcond_fu_358_p2 = (uart_ou_0_rec_reg_168 == tmp7_reg_491? 1'b1: 1'b0);
assign grp_fu_223_p3 = len_response[ap_const_lv32_4];
assign grp_fu_230_p3 = ((grp_fu_223_p3)? ap_const_lv5_10: len_response);
assign grp_fu_237_p2 = (ap_const_lv5_0 == grp_fu_230_p3? 1'b1: 1'b0);
assign len_command_assign_fu_249_p3 = ((tmp_fu_243_p2)? ap_const_lv5_10: len_command);
assign len_response_assign_1_fu_289_p3 = ((tmp_4_fu_283_p2)? len_response_assign_fu_263_p3: len_command_assign_fu_249_p3);
assign len_response_assign_fu_263_p3 = ((tmp_1_fu_257_p2)? ap_const_lv5_10: len_response);
assign loopcnt_fu_348_p2 = (ap_const_lv9_78 - p_shl_cast_fu_334_p1);
assign p3_fu_297_p1 = $unsigned(len_response_assign_1_fu_289_p3);
assign p_Result_s_fu_369_p2 = $signed(loopcnt_fu_348_p2);
assign p_Result_s_fu_369_p3 = $signed(tmp2_fu_338_p2);
wire [7-1:0] p_Result_s_fu_369_p4_vh_buf;
wire [7-1:0] p_Result_s_fu_369_p4_vl_buf;
wire [128-1:0] p_Result_s_fu_369_p4_vi_buf;
wire [128-1:0] p_Result_s_fu_369_p4_vo_buf;
wire [128-1:0] p_Result_s_fu_369_p4_vi_r;
wire [7:0] p_Result_s_fu_369_p4_length;
wire [128-1:0] p_Result_s_fu_369_p4_mask;

genvar ap_tvar_int_0;
generate
    for (ap_tvar_int_0 = 0; ap_tvar_int_0 < 128; ap_tvar_int_0 = ap_tvar_int_0 + 1) begin :p_Result_s_fu_369_p4_label0
        assign p_Result_s_fu_369_p4_vi_r[ap_tvar_int_0] = command[128-1-ap_tvar_int_0];
    end
endgenerate

assign p_Result_s_fu_369_p4_vh_buf = (p_Result_s_fu_369_p3 >= p_Result_s_fu_369_p2)? p_Result_s_fu_369_p3 : (128 -1- p_Result_s_fu_369_p3);
assign p_Result_s_fu_369_p4_vl_buf = (p_Result_s_fu_369_p3 >= p_Result_s_fu_369_p2)? p_Result_s_fu_369_p2 : (128 -1-p_Result_s_fu_369_p2);
assign p_Result_s_fu_369_p4_vi_buf = (p_Result_s_fu_369_p3 >= p_Result_s_fu_369_p2)? command : p_Result_s_fu_369_p4_vi_r;
assign p_Result_s_fu_369_p4_length = p_Result_s_fu_369_p4_vh_buf - p_Result_s_fu_369_p4_vl_buf + 1'b1;
assign p_Result_s_fu_369_p4_mask = ~({128{1'b1}} << p_Result_s_fu_369_p4_length);
assign p_Result_s_fu_369_p4 = (p_Result_s_fu_369_p4_vi_buf >> p_Result_s_fu_369_p4_vl_buf) & p_Result_s_fu_369_p4_mask;

assign p_rec_fu_363_p2 = (uart_ou_0_rec_reg_168 + ap_const_lv5_1);
assign p_shl_cast_fu_334_p1 = $unsigned(p_shl_fu_328_p2);
assign p_shl_fu_328_p2 = uart_ou_0_rec_cast_fu_324_p1 << ap_const_lv8_3;
assign tmp2_fu_338_p2 = (ap_const_lv8_7F - p_shl_fu_328_p2);
assign tmp7_fu_310_p3 = ((tmp_9_fu_302_p3)? ap_const_lv5_10: len_command);
assign tmp_11_fu_445_p1 = $unsigned(uart_in_dout);
assign tmp_13_fu_401_p1 = $unsigned(uart_in_dout);
assign tmp_14_fu_397_p1 = $unsigned(uart_in_dout);
assign tmp_15_fu_418_p2 = tmp_14_reg2mem_reg_199 << ap_const_lv128_lc_2;
assign tmp_16_fu_425_p1 = $unsigned(uart_in_dout);
assign tmp_17_fu_429_p1 = tmp_14_reg2mem_reg_199[119:0];
assign tmp_18_fu_433_p5 = {{tmp_17_fu_429_p1}, {tmp_16_fu_425_p1[32'd7 : 32'd0]}};
assign tmp_1_fu_257_p2 = (len_response > ap_const_lv5_10? 1'b1: 1'b0);
assign tmp_2_fu_271_p2 = (len_command_assign_fu_249_p3 == ap_const_lv5_0? 1'b1: 1'b0);
assign tmp_3_fu_277_p2 = (len_response_assign_fu_263_p3 != ap_const_lv5_0? 1'b1: 1'b0);
assign tmp_4_fu_283_p2 = (tmp_2_fu_271_p2 & tmp_3_fu_277_p2);
assign tmp_5_fu_318_p2 = (uart_in_dout == ins? 1'b1: 1'b0);
assign tmp_6_fu_388_p2 = (tmp_s_fu_383_p2 & tmp_3_reg_486);
assign tmp_7_fu_378_p1 = p_Result_s_fu_369_p4[7:0];
assign tmp_8_fu_393_p1 = $unsigned(len_response_assign_reg_481);
assign tmp_9_fu_302_p3 = len_command[ap_const_lv32_4];
assign tmp_fu_243_p2 = (len_command > ap_const_lv5_10? 1'b1: 1'b0);
assign tmp_s_fu_383_p2 = (len_command_assign_reg_476 != ap_const_lv5_0? 1'b1: 1'b0);
assign uart_i_0_rec_fu_406_p2 = (uart_i_0_rec_reload_reg2mem_reg_211 + ap_const_lv5_1);
assign uart_ou_0_rec_cast_fu_324_p1 = $unsigned(uart_ou_0_rec_reg_168);
always @ (posedge ap_clk)
begin
    tmp_14_reg2mem_0_ph_reg_189[127:8] <= 120'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
end



endmodule //smartcard

